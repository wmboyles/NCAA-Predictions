import numpy as np

FILENAME = "ACC_Tourney.csv"
ITERATIONS = 100

"""
Looks through a given .csv file formatted as
WINNING TEAM,LOSING,TEAM,[OPTIONAL INFO],MARGIN OF VICTORY
to extract score information.
There must be an empty line at the end of the .csv file.

This inofrmation is returned as a list containing lists of 3 items where the
first item is the winning team, the second item is the losing team, and the final
item is the margin of victory.
"""
def scrape_file(filename=FILENAME):
    with open(filename) as f:
        lines = f.readlines()

    entry_list = []
    for line in lines[1:]:
        l = line[:-1].split(',')
        l = [l[0],l[1],int(l[-1])]
        entry_list.append(l)

    return entry_list

"""
Given the scoring information generated by scrape_file, this function returns a
list of all the listed teams in sorted order.

Used as a helper method for find_lost_points.
"""
def get_teams(score_info):
    teams = set()
    for entry in score_info:
        teams.add(entry[0])
        teams.add(entry[1])

    return sorted(teams)

"""
Finds the total number of points that a team has lost by in the given scoring
info.
For example, if team A lost to team B by 6 and team C by 4, then A would have a
value of 6+4=10.

Returns this information as a tuple where the first entry is a list of all teams
and the second entry is a dict with the teams as keys and total lost points as
values.

Used as a helper method for make_matrix.
"""
def find_lost_points(score_info):
    teams = get_teams(score_info)
    
    lost_points = dict()
    for team in teams:
        lost_points.setdefault(team, 0)

    for entry in score_info:
        lost_points[entry[1]] += entry[2]

    return (teams, lost_points)

"""
Given the scoring
"""
def make_pagerank_matrix_vector(score_info):
    teams, lost_points = find_lost_points(score_info)
    num_teams = len(teams)
    
    mat, vec = np.zeros((num_teams, num_teams)), np.zeros((num_teams, 1))
    for r in range(num_teams):
        vec[r] = 1/num_teams
    for entry in score_info:
        row, col = teams.index(entry[0]), teams.index(entry[1])
        mat[row,col] = entry[2] / lost_points[entry[1]]

    return mat,vec,teams


m,v,teams = make_pagerank_matrix_vector(scrape_file())
for i in range(ITERATIONS):
    v = m @ v
    v *= 1/sum(v)

pairs = sorted([(score[0], team) for score,team in zip(v,teams)])
for item in pairs:
    print(item)
